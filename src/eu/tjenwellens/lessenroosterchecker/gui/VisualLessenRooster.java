/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.tjenwellens.lessenroosterchecker.gui;

import eu.tjenwellens.lessenroosterchecker.elements.WeekDag;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import javax.swing.JFrame;

/**
 *
 * @author Tjen
 */
public class VisualLessenRooster extends javax.swing.JPanel {
    public static final boolean PRINT_COURSE_NAME = true;
    public static final int SHOW_LETTERS = 15;
    public static final int ROOSTER_START = 8;
    public static final int ROOSTER_END = 18;
    private static final int W = 400;
    private static final int H = 400;
    private Dimension size = new Dimension(50, 20);
    private static final Point offset = new Point(20, 30);
    private JFrame frame;
    private String[][] lessen;

    private void recalculateSize() {
        int w = (getWidth() - offset.x) / lessen.length;
        int h = (getHeight() - offset.y) / lessen[0].length;
        size = new Dimension(w, h);
    }

    /**
     * Creates new form VisualLessenRooster
     */
    private VisualLessenRooster(JFrame frame, String[][] lessen) {
        this.frame = frame;
        this.lessen = lessen;
        initComponents();
//        int width = (int) offset.getX() + size.width * lessen.length;
//        int height = (int) offset.getY() + size.height * lessen[0].length;
//        System.out.print(width);
//        System.out.print(",");
//        System.out.println(height);
        this.setPreferredSize(new Dimension(W, H));
    }

    public void setLessen(String[][] lessen) {
        this.lessen = lessen;
        invalidate();
        validate();
    }

    public static VisualLessenRooster create(String[][] rooster, String title) {
        JFrame frame = new JFrame(title);
        VisualLessenRooster panel = new VisualLessenRooster(frame, rooster);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setContentPane(panel);
        frame.pack();
        frame.setVisible(true);
        return panel;
    }

    @Override
    protected void paintComponent(Graphics g) {
        recalculateSize();
        super.paintComponent(g);

        for (int dag = 0; dag < lessen.length; dag++) {
            for (int kwart = 0; kwart < lessen[dag].length; kwart++) {
                String les = lessen[dag][kwart];
                Color c;
                if (les == null) {
                    if (dag >= 5) {
                        c = getBackground().darker();
                    } else {
                        c = getBackground();
                    }
                } else if (les.isEmpty()) {
                    c = Color.red;
                } else {
                    c = Color.green;
                }
                g.setColor(c);
                g.fillRect(offset.x + size.width * dag, offset.y + size.height * kwart, offset.x + size.width * (dag + 1), offset.y + size.height * (kwart + 1));
                if (PRINT_COURSE_NAME && les != null) {
                    g.setColor(Color.black);
                    int x = offset.x + size.width * dag;
                    int y = offset.y + size.height * (kwart + 1);
                    g.drawString(les.substring(0, SHOW_LETTERS).toLowerCase(), x, y);
                }
            }
        }
        g.setColor(Color.black);
        for (int dag = 0; dag <= lessen.length; dag++) {
            g.drawLine(offset.x + size.width * dag, 0, offset.x + size.width * dag, offset.y + size.height * lessen[0].length);
        }
        for (int kwart = 0; kwart <= lessen[0].length; kwart++) {
            g.drawLine(0, offset.y + size.height * kwart, offset.x + size.width * lessen.length, offset.y + size.height * kwart);
        }
        int fontSize = g.getFontMetrics().getHeight();
        for (WeekDag d : WeekDag.values()) {
            String str = d.name().substring(0, 3).toUpperCase();
            int x = offset.x + size.width * d.ordinal();
            x += g.getFontMetrics().stringWidth(str) / 2;
            int y = offset.y;
            y -= g.getFontMetrics().getHeight() / 2;
            g.drawString(str, x, y);
        }
        for (int uur = ROOSTER_START; uur < ROOSTER_END; uur++) {
            String str = String.valueOf(uur);
            int x = offset.x - g.getFontMetrics().stringWidth(str);
            int kwart = (uur - ROOSTER_START) * 4;
            int y = offset.y + size.height * kwart;
            y += g.getFontMetrics().getHeight();
            g.drawString(str, x, y);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
